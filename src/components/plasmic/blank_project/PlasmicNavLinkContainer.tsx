// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: kLBHGn3Vn82YBnTDGnqJfk
// Component: WRM0BEC3CS

import * as React from "react";

import * as p from "@plasmicapp/react-web";
import * as ph from "@plasmicapp/react-web/lib/host";

import {
  usePlasmicDataConfig,
  executePlasmicDataOp,
  usePlasmicDataOp
} from "@plasmicapp/react-web/lib/data-sources";

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";
import Link from "../../Link"; // plasmic-import: FST3lsHJsh/component
import NavSubMenu from "../../NavSubMenu"; // plasmic-import: sSdXxYFyEs/component
import { Fetcher } from "@plasmicapp/react-web/lib/data-sources"; // plasmic-import: P4BrsHd2XTVTCj/codeComponent

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic_antd_5_hostless.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import projectcss from "./plasmic_blank_project.module.css"; // plasmic-import: kLBHGn3Vn82YBnTDGnqJfk/projectcss
import sty from "./PlasmicNavLinkContainer.module.css"; // plasmic-import: WRM0BEC3CS/css

export type PlasmicNavLinkContainer__VariantMembers = {};
export type PlasmicNavLinkContainer__VariantsArgs = {};
type VariantPropType = keyof PlasmicNavLinkContainer__VariantsArgs;
export const PlasmicNavLinkContainer__VariantProps =
  new Array<VariantPropType>();

export type PlasmicNavLinkContainer__ArgsType = {
  subMenuVisible?: boolean;
  linkElement?: React.ReactNode;
  subMenuElement?: React.ReactNode;
  isAnotherMenuOpen?: any;
};
type ArgPropType = keyof PlasmicNavLinkContainer__ArgsType;
export const PlasmicNavLinkContainer__ArgProps = new Array<ArgPropType>(
  "subMenuVisible",
  "linkElement",
  "subMenuElement",
  "isAnotherMenuOpen"
);

export type PlasmicNavLinkContainer__OverridesType = {
  root?: p.Flex<"div">;
  text?: p.Flex<"div">;
};

export interface DefaultNavLinkContainerProps {
  subMenuVisible?: boolean;
  linkElement?: React.ReactNode;
  subMenuElement?: React.ReactNode;
  isAnotherMenuOpen?: any;
  className?: string;
}

const __wrapUserFunction =
  globalThis.__PlasmicWrapUserFunction ?? ((loc, fn) => fn());
const __wrapUserPromise =
  globalThis.__PlasmicWrapUserPromise ??
  (async (loc, promise) => {
    return await promise;
  });

function PlasmicNavLinkContainer__RenderFunc(props: {
  variants: PlasmicNavLinkContainer__VariantsArgs;
  args: PlasmicNavLinkContainer__ArgsType;
  overrides: PlasmicNavLinkContainer__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const $ctx = ph.useDataEnv?.() || {};
  const args = React.useMemo(
    () =>
      Object.assign(
        {
          subMenuVisible: false,
          isAnotherMenuOpen: {}
        },
        props.args
      ),
    [props.args]
  );
  const $props = {
    ...args,
    ...variants
  };
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const currentUser = p.useCurrentUser?.() || {};

  const [$queries, setDollarQueries] = React.useState({});

  const stateSpecs = React.useMemo(
    () => [
      {
        path: "menuLinkClicked",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false
      }
    ],
    [$props, $ctx]
  );
  const $state = p.useDollarState(stateSpecs, { $props, $ctx, $queries });

  return (
    true ? (
      <div
        data-plasmic-name={"root"}
        data-plasmic-override={overrides.root}
        data-plasmic-root={true}
        data-plasmic-for-node={forNode}
        className={classNames(
          projectcss.all,
          projectcss.root_reset,
          projectcss.plasmic_default_styles,
          projectcss.plasmic_mixins,
          projectcss.plasmic_tokens,
          plasmic_antd_5_hostless_css.plasmic_tokens,
          sty.root
        )}
      >
        <div
          data-plasmic-name={"text"}
          data-plasmic-override={overrides.text}
          className={classNames(
            projectcss.all,
            projectcss.__wab_text,
            sty.text
          )}
        >
          <div
            className={projectcss.__wab_expr_html_text}
            dangerouslySetInnerHTML={{
              __html: (() => {
                try {
                  return JSON.stringify($props.isAnotherMenuOpen);
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return "";
                  }
                  throw e;
                }
              })()
            }}
          />
        </div>
        {true ? (
          <div
            className={classNames(projectcss.all, sty.freeBox__cIyEx)}
            onClick={async event => {
              const $steps = {};
              $steps["updateMenuLinkClicked"] = true
                ? (() => {
                    const actionArgs = {
                      variable: __wrapUserFunction(
                        {
                          type: "InteractionArgLoc",
                          actionName: "updateVariable",
                          interactionUuid: "YbnODumuh",
                          componentUuid: "WRM0BEC3CS",
                          argName: "variable"
                        },
                        () => ({
                          objRoot: $state,
                          variablePath: ["menuLinkClicked"]
                        })
                      ),
                      operation: __wrapUserFunction(
                        {
                          type: "InteractionArgLoc",
                          actionName: "updateVariable",
                          interactionUuid: "YbnODumuh",
                          componentUuid: "WRM0BEC3CS",
                          argName: "operation"
                        },
                        () => 4
                      )
                    };
                    return __wrapUserFunction(
                      {
                        type: "InteractionLoc",
                        actionName: "updateVariable",
                        interactionUuid: "YbnODumuh",
                        componentUuid: "WRM0BEC3CS"
                      },
                      () =>
                        (({ variable, value, startIndex, deleteCount }) => {
                          if (!variable) {
                            return;
                          }
                          const { objRoot, variablePath } = variable;

                          const oldValue = p.get(objRoot, variablePath);
                          p.set(objRoot, variablePath, !oldValue);
                          return !oldValue;
                        })?.apply(null, [actionArgs]),
                      actionArgs
                    );
                  })()
                : undefined;
              if (
                typeof $steps["updateMenuLinkClicked"] === "object" &&
                typeof $steps["updateMenuLinkClicked"].then === "function"
              ) {
                $steps["updateMenuLinkClicked"] = await __wrapUserPromise(
                  {
                    type: "InteractionLoc",
                    actionName: "updateVariable",
                    interactionUuid: "YbnODumuh",
                    componentUuid: "WRM0BEC3CS"
                  },
                  $steps["updateMenuLinkClicked"]
                );
              }
              $steps["runCode"] = true
                ? (() => {
                    const actionArgs = {
                      customFunction: __wrapUserFunction(
                        {
                          type: "InteractionArgLoc",
                          actionName: "customFunction",
                          interactionUuid: "ZIUAX1Sju",
                          componentUuid: "WRM0BEC3CS",
                          argName: "customFunction"
                        },
                        () => () => {
                          return ($props.isAnotherMenuOpen = {
                            test: "wroks"
                          });
                        }
                      )
                    };
                    return __wrapUserFunction(
                      {
                        type: "InteractionLoc",
                        actionName: "customFunction",
                        interactionUuid: "ZIUAX1Sju",
                        componentUuid: "WRM0BEC3CS"
                      },
                      () =>
                        (({ customFunction }) => {
                          return customFunction();
                        })?.apply(null, [actionArgs]),
                      actionArgs
                    );
                  })()
                : undefined;
              if (
                typeof $steps["runCode"] === "object" &&
                typeof $steps["runCode"].then === "function"
              ) {
                $steps["runCode"] = await __wrapUserPromise(
                  {
                    type: "InteractionLoc",
                    actionName: "customFunction",
                    interactionUuid: "ZIUAX1Sju",
                    componentUuid: "WRM0BEC3CS"
                  },
                  $steps["runCode"]
                );
              }
            }}
          >
            {p.renderPlasmicSlot({
              defaultContents: (
                <Link
                  className={classNames("__wab_instance", sty.link___6OwzQ)}
                  type={"navMenuLink" as const}
                >
                  {"Loans"}
                </Link>
              ),
              value: args.linkElement
            })}
          </div>
        ) : null}
        {(() => {
          try {
            return $state.menuLinkClicked;
          } catch (e) {
            if (
              e instanceof TypeError ||
              e?.plasmicType === "PlasmicUndefinedDataError"
            ) {
              return true;
            }
            throw e;
          }
        })() ? (
          <div className={classNames(projectcss.all, sty.freeBox__y1MeS)}>
            {p.renderPlasmicSlot({
              defaultContents: (
                <NavSubMenu
                  className={classNames(
                    "__wab_instance",
                    sty.navSubMenu___4XTlK
                  )}
                />
              ),

              value: args.subMenuElement
            })}
          </div>
        ) : null}
      </div>
    ) : null
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: ["root", "text"],
  text: ["text"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  text: "div";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicNavLinkContainer__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicNavLinkContainer__VariantsArgs;
    args?: PlasmicNavLinkContainer__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicNavLinkContainer__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    /* Specify args directly as props*/ Omit<
      PlasmicNavLinkContainer__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: [...PlasmicDescendants[nodeName]],
          internalArgPropNames: PlasmicNavLinkContainer__ArgProps,
          internalVariantPropNames: PlasmicNavLinkContainer__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicNavLinkContainer__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicNavLinkContainer";
  } else {
    func.displayName = `PlasmicNavLinkContainer.${nodeName}`;
  }
  return func;
}

export const PlasmicNavLinkContainer = Object.assign(
  // Top-level PlasmicNavLinkContainer renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    text: makeNodeComponent("text"),

    // Metadata about props expected for PlasmicNavLinkContainer
    internalVariantProps: PlasmicNavLinkContainer__VariantProps,
    internalArgProps: PlasmicNavLinkContainer__ArgProps
  }
);

export default PlasmicNavLinkContainer;
/* prettier-ignore-end */
