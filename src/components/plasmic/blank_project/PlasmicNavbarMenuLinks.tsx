// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: kLBHGn3Vn82YBnTDGnqJfk
// Component: emTkYl4Ziw

import * as React from "react";

import * as p from "@plasmicapp/react-web";
import * as ph from "@plasmicapp/react-web/lib/host";

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";
import NavLinkContainer from "../../NavLinkContainer"; // plasmic-import: WRM0BEC3CS/component
import Link from "../../Link"; // plasmic-import: FST3lsHJsh/component
import NavSubMenu from "../../NavSubMenu"; // plasmic-import: sSdXxYFyEs/component

import { useScreenVariants as useScreenVariantsumbX3S4MCKk91P } from "./PlasmicGlobalVariant__Screen"; // plasmic-import: UmbX3s4mCKk91P/globalVariant

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic_antd_5_hostless.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import projectcss from "./plasmic_blank_project.module.css"; // plasmic-import: kLBHGn3Vn82YBnTDGnqJfk/projectcss
import sty from "./PlasmicNavbarMenuLinks.module.css"; // plasmic-import: emTkYl4Ziw/css

import Icon5Icon from "./icons/PlasmicIcon__Icon5"; // plasmic-import: t8W2xcAuVE/icon
import Icon6Icon from "./icons/PlasmicIcon__Icon6"; // plasmic-import: 7W0-Fdcas_/icon

export type PlasmicNavbarMenuLinks__VariantMembers = {};
export type PlasmicNavbarMenuLinks__VariantsArgs = {};
type VariantPropType = keyof PlasmicNavbarMenuLinks__VariantsArgs;
export const PlasmicNavbarMenuLinks__VariantProps =
  new Array<VariantPropType>();

export type PlasmicNavbarMenuLinks__ArgsType = {};
type ArgPropType = keyof PlasmicNavbarMenuLinks__ArgsType;
export const PlasmicNavbarMenuLinks__ArgProps = new Array<ArgPropType>();

export type PlasmicNavbarMenuLinks__OverridesType = {
  root?: p.Flex<"div">;
  navLinkContainer?: p.Flex<typeof NavLinkContainer>;
  navLinkContainer2?: p.Flex<typeof NavLinkContainer>;
  navLinkContainer3?: p.Flex<typeof NavLinkContainer>;
  searchIcon?: p.Flex<"svg">;
  lockIcon?: p.Flex<"svg">;
};

export interface DefaultNavbarMenuLinksProps {
  className?: string;
}

const __wrapUserFunction =
  globalThis.__PlasmicWrapUserFunction ?? ((loc, fn) => fn());
const __wrapUserPromise =
  globalThis.__PlasmicWrapUserPromise ??
  (async (loc, promise) => {
    return await promise;
  });

function PlasmicNavbarMenuLinks__RenderFunc(props: {
  variants: PlasmicNavbarMenuLinks__VariantsArgs;
  args: PlasmicNavbarMenuLinks__ArgsType;
  overrides: PlasmicNavbarMenuLinks__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const $ctx = ph.useDataEnv?.() || {};
  const args = React.useMemo(() => Object.assign({}, props.args), [props.args]);
  const $props = {
    ...args,
    ...variants
  };
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const currentUser = p.useCurrentUser?.() || {};

  const [$queries, setDollarQueries] = React.useState({});

  const stateSpecs = React.useMemo(
    () => [
      {
        path: "menuOpen4",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => ({})
      }
    ],
    [$props, $ctx]
  );
  const $state = p.useDollarState(stateSpecs, { $props, $ctx, $queries });

  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariantsumbX3S4MCKk91P()
  });

  return (
    <div
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        plasmic_antd_5_hostless_css.plasmic_tokens,
        sty.root
      )}
    >
      {true ? (
        <NavLinkContainer
          data-plasmic-name={"navLinkContainer"}
          data-plasmic-override={overrides.navLinkContainer}
          className={classNames("__wab_instance", sty.navLinkContainer)}
          linkElement={
            <Link
              className={classNames("__wab_instance", sty.link__smK)}
              type={"navMenuLink" as const}
            >
              {"Banking"}
            </Link>
          }
          subMenuVisible={false}
        />
      ) : null}
      {true ? (
        <NavLinkContainer
          data-plasmic-name={"navLinkContainer2"}
          data-plasmic-override={overrides.navLinkContainer2}
          className={classNames("__wab_instance", sty.navLinkContainer2)}
        />
      ) : null}
      <Link
        className={classNames("__wab_instance", sty.link__xKpju)}
        type={"navMenuLink" as const}
      >
        <div
          className={classNames(
            projectcss.all,
            projectcss.__wab_text,
            sty.text__uaifn
          )}
        >
          {"Financial Planning"}
        </div>
      </Link>
      <Link
        className={classNames("__wab_instance", sty.link__k05E3)}
        type={"navMenuLink" as const}
      >
        {"Insurance"}
      </Link>
      {true ? (
        <NavLinkContainer
          data-plasmic-name={"navLinkContainer3"}
          data-plasmic-override={overrides.navLinkContainer3}
          className={classNames("__wab_instance", sty.navLinkContainer3)}
          linkElement={
            <Link
              className={classNames("__wab_instance", sty.link__vPsFl)}
              type={"navMenuLink" as const}
            >
              {"Travel"}
            </Link>
          }
        />
      ) : null}
      <Icon5Icon
        data-plasmic-name={"searchIcon"}
        data-plasmic-override={overrides.searchIcon}
        className={classNames(projectcss.all, sty.searchIcon)}
        role={"img"}
      />

      <Icon6Icon
        data-plasmic-name={"lockIcon"}
        data-plasmic-override={overrides.lockIcon}
        className={classNames(projectcss.all, sty.lockIcon)}
        role={"img"}
      />

      <div
        className={classNames(
          projectcss.all,
          projectcss.__wab_text,
          sty.text__sym6Y
        )}
      >
        <div
          className={projectcss.__wab_expr_html_text}
          dangerouslySetInnerHTML={{
            __html: (() => {
              try {
                return $state.menuOpen4;
              } catch (e) {
                if (
                  e instanceof TypeError ||
                  e?.plasmicType === "PlasmicUndefinedDataError"
                ) {
                  return "";
                }
                throw e;
              }
            })()
          }}
        />
      </div>
    </div>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: [
    "root",
    "navLinkContainer",
    "navLinkContainer2",
    "navLinkContainer3",
    "searchIcon",
    "lockIcon"
  ],
  navLinkContainer: ["navLinkContainer"],
  navLinkContainer2: ["navLinkContainer2"],
  navLinkContainer3: ["navLinkContainer3"],
  searchIcon: ["searchIcon"],
  lockIcon: ["lockIcon"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  navLinkContainer: typeof NavLinkContainer;
  navLinkContainer2: typeof NavLinkContainer;
  navLinkContainer3: typeof NavLinkContainer;
  searchIcon: "svg";
  lockIcon: "svg";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicNavbarMenuLinks__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicNavbarMenuLinks__VariantsArgs;
    args?: PlasmicNavbarMenuLinks__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicNavbarMenuLinks__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    /* Specify args directly as props*/ Omit<
      PlasmicNavbarMenuLinks__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: [...PlasmicDescendants[nodeName]],
          internalArgPropNames: PlasmicNavbarMenuLinks__ArgProps,
          internalVariantPropNames: PlasmicNavbarMenuLinks__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicNavbarMenuLinks__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicNavbarMenuLinks";
  } else {
    func.displayName = `PlasmicNavbarMenuLinks.${nodeName}`;
  }
  return func;
}

export const PlasmicNavbarMenuLinks = Object.assign(
  // Top-level PlasmicNavbarMenuLinks renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    navLinkContainer: makeNodeComponent("navLinkContainer"),
    navLinkContainer2: makeNodeComponent("navLinkContainer2"),
    navLinkContainer3: makeNodeComponent("navLinkContainer3"),
    searchIcon: makeNodeComponent("searchIcon"),
    lockIcon: makeNodeComponent("lockIcon"),

    // Metadata about props expected for PlasmicNavbarMenuLinks
    internalVariantProps: PlasmicNavbarMenuLinks__VariantProps,
    internalArgProps: PlasmicNavbarMenuLinks__ArgProps
  }
);

export default PlasmicNavbarMenuLinks;
/* prettier-ignore-end */
