// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: kLBHGn3Vn82YBnTDGnqJfk
// Component: fj3lrR6bqiKN2

import * as React from "react";

import * as p from "@plasmicapp/react-web";
import * as ph from "@plasmicapp/react-web/lib/host";

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";
import Link from "../../Link"; // plasmic-import: FST3lsHJsh/component
import HeaderText from "../../HeaderText"; // plasmic-import: JUJxh7K9DX/component
import NavbarMenuLinks from "../../NavbarMenuLinks"; // plasmic-import: emTkYl4Ziw/component
import Button from "../../Button"; // plasmic-import: FxpPQ7-wWLy/component

import { useScreenVariants as useScreenVariantsumbX3S4MCKk91P } from "./PlasmicGlobalVariant__Screen"; // plasmic-import: UmbX3s4mCKk91P/globalVariant

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic_antd_5_hostless.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import projectcss from "./plasmic_blank_project.module.css"; // plasmic-import: kLBHGn3Vn82YBnTDGnqJfk/projectcss
import sty from "./PlasmicHomepage.module.css"; // plasmic-import: fj3lrR6bqiKN2/css

import ChecksvgIcon from "./icons/PlasmicIcon__Checksvg"; // plasmic-import: nuudgiLMynC/icon
import IconIcon from "./icons/PlasmicIcon__Icon"; // plasmic-import: logztJZIqxF/icon
import imbLogosvgVe5Gkv7BXh from "./images/imbLogosvg.svg"; // plasmic-import: VE5gkv7bXH/picture

export type PlasmicHomepage__VariantMembers = {};
export type PlasmicHomepage__VariantsArgs = {};
type VariantPropType = keyof PlasmicHomepage__VariantsArgs;
export const PlasmicHomepage__VariantProps = new Array<VariantPropType>();

export type PlasmicHomepage__ArgsType = {};
type ArgPropType = keyof PlasmicHomepage__ArgsType;
export const PlasmicHomepage__ArgProps = new Array<ArgPropType>();

export type PlasmicHomepage__OverridesType = {
  root?: p.Flex<"div">;
  headerSection?: p.Flex<"section">;
  topLinksSection?: p.Flex<"div">;
  topLinksLeft?: p.Flex<"div">;
  topLinksRight?: p.Flex<"div">;
  navbar?: p.Flex<"section">;
  img?: p.Flex<typeof p.PlasmicImg>;
  navbarMenuLinks?: p.Flex<typeof NavbarMenuLinks>;
};

export interface DefaultHomepageProps {
  className?: string;
}

const __wrapUserFunction =
  globalThis.__PlasmicWrapUserFunction ?? ((loc, fn) => fn());
const __wrapUserPromise =
  globalThis.__PlasmicWrapUserPromise ??
  (async (loc, promise) => {
    return await promise;
  });

function PlasmicHomepage__RenderFunc(props: {
  variants: PlasmicHomepage__VariantsArgs;
  args: PlasmicHomepage__ArgsType;
  overrides: PlasmicHomepage__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const $ctx = ph.useDataEnv?.() || {};
  const args = React.useMemo(() => Object.assign({}, props.args), [props.args]);
  const $props = {
    ...args,
    ...variants
  };
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const currentUser = p.useCurrentUser?.() || {};

  const [$queries, setDollarQueries] = React.useState({});

  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariantsumbX3S4MCKk91P()
  });

  return (
    <React.Fragment>
      <div className={projectcss.plasmic_page_wrapper}>
        <div
          data-plasmic-name={"root"}
          data-plasmic-override={overrides.root}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          className={classNames(
            projectcss.all,
            projectcss.root_reset,
            projectcss.plasmic_default_styles,
            projectcss.plasmic_mixins,
            projectcss.plasmic_tokens,
            plasmic_antd_5_hostless_css.plasmic_tokens,
            sty.root
          )}
        >
          <section
            data-plasmic-name={"headerSection"}
            data-plasmic-override={overrides.headerSection}
            className={classNames(projectcss.all, sty.headerSection)}
          >
            {(hasVariant(globalVariants, "screen", "mobile") ? true : true) ? (
              <div
                data-plasmic-name={"topLinksSection"}
                data-plasmic-override={overrides.topLinksSection}
                className={classNames(projectcss.all, sty.topLinksSection)}
              >
                <div className={classNames(projectcss.all, sty.freeBox__bItmF)}>
                  <div
                    data-plasmic-name={"topLinksLeft"}
                    data-plasmic-override={overrides.topLinksLeft}
                    className={classNames(projectcss.all, sty.topLinksLeft)}
                  >
                    <Link
                      active={true}
                      className={classNames("__wab_instance", sty.link__qqInZ)}
                      type={"headerLink" as const}
                    >
                      {"Personal"}
                    </Link>
                    <Link
                      className={classNames("__wab_instance", sty.link__xvaXx)}
                      type={"headerLink" as const}
                    >
                      {"Business"}
                    </Link>
                    <Link
                      className={classNames("__wab_instance", sty.link___8A6Al)}
                      type={"headerLink" as const}
                    >
                      {"Community"}
                    </Link>
                    <Link
                      className={classNames("__wab_instance", sty.link__sUfqo)}
                      type={"headerLink" as const}
                    >
                      {"About"}
                    </Link>
                  </div>
                  <div
                    data-plasmic-name={"topLinksRight"}
                    data-plasmic-override={overrides.topLinksRight}
                    className={classNames(projectcss.all, sty.topLinksRight)}
                  >
                    <HeaderText
                      className={classNames(
                        "__wab_instance",
                        sty.headerText__kbzGp
                      )}
                      color={"white" as const}
                    />

                    <HeaderText
                      className={classNames(
                        "__wab_instance",
                        sty.headerText__l3Mad
                      )}
                      color={"white" as const}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__cwt20
                        )}
                      >
                        {"BSB: 641 800"}
                      </div>
                    </HeaderText>
                  </div>
                </div>
              </div>
            ) : null}
            <section
              data-plasmic-name={"navbar"}
              data-plasmic-override={overrides.navbar}
              className={classNames(projectcss.all, sty.navbar)}
            >
              <div className={classNames(projectcss.all, sty.freeBox__mc46)}>
                <p.PlasmicImg
                  data-plasmic-name={"img"}
                  data-plasmic-override={overrides.img}
                  alt={""}
                  className={classNames(sty.img)}
                  displayHeight={"auto" as const}
                  displayMaxHeight={"none" as const}
                  displayMaxWidth={"100%" as const}
                  displayMinHeight={"0" as const}
                  displayMinWidth={"0" as const}
                  displayWidth={"100px" as const}
                  loading={"lazy" as const}
                  src={{
                    src: imbLogosvgVe5Gkv7BXh,
                    fullWidth: 300,
                    fullHeight: 125,
                    aspectRatio: 2.402795
                  }}
                />

                <NavbarMenuLinks
                  data-plasmic-name={"navbarMenuLinks"}
                  data-plasmic-override={overrides.navbarMenuLinks}
                  className={classNames("__wab_instance", sty.navbarMenuLinks)}
                />
              </div>
            </section>
          </section>
          <p.Stack
            as={"div"}
            hasGap={true}
            className={classNames(projectcss.all, sty.freeBox__oQi2V)}
          >
            <p.Stack
              as={"div"}
              hasGap={true}
              className={classNames(projectcss.all, sty.freeBox__nASzZ)}
            >
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__tp5V
                )}
              >
                <React.Fragment>
                  <React.Fragment>{"Designs that "}</React.Fragment>
                  <span
                    className={"plasmic_default__all plasmic_default__span"}
                    style={{ textDecoration: "underline" }}
                  >
                    {"scale"}
                  </span>
                </React.Fragment>
              </div>
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text___7WbQd
                )}
              >
                {
                  "Orci dui condimentum rutrum laoreet hac purus porta sem sem a vivamus a posuere vel molestie."
                }
              </div>
              <p.Stack
                as={"div"}
                hasGap={true}
                className={classNames(projectcss.all, sty.freeBox__lNdTm)}
              >
                <Button
                  className={classNames("__wab_instance", sty.button__zKbql)}
                  endIcon={
                    <IconIcon
                      className={classNames(projectcss.all, sty.svg__fjvk2)}
                      role={"img"}
                    />
                  }
                  startIcon={
                    <ChecksvgIcon
                      className={classNames(projectcss.all, sty.svg___0E6X)}
                      role={"img"}
                    />
                  }
                  submitsForm={true}
                >
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__faLp8
                    )}
                  >
                    {"Start now ->"}
                  </div>
                </Button>
                <Button
                  className={classNames("__wab_instance", sty.button__fZklg)}
                  color={"clear" as const}
                  endIcon={
                    <IconIcon
                      className={classNames(projectcss.all, sty.svg__aoVsL)}
                      role={"img"}
                    />
                  }
                  startIcon={
                    <ChecksvgIcon
                      className={classNames(projectcss.all, sty.svg__tcPrK)}
                      role={"img"}
                    />
                  }
                  submitsForm={true}
                >
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text___6KIjD
                    )}
                  >
                    {"Learn more\u2026"}
                  </div>
                </Button>
              </p.Stack>
            </p.Stack>
          </p.Stack>
          <p.Stack
            as={"div"}
            hasGap={true}
            className={classNames(projectcss.all, sty.freeBox__x62XQ)}
          >
            <p.Stack
              as={"div"}
              hasGap={true}
              className={classNames(projectcss.all, sty.freeBox__keKIm)}
            >
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__oQjV
                )}
              >
                <React.Fragment>
                  <React.Fragment>{"Designs that "}</React.Fragment>
                  <span
                    className={"plasmic_default__all plasmic_default__span"}
                    style={{ textDecoration: "underline" }}
                  >
                    {"scale"}
                  </span>
                </React.Fragment>
              </div>
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__rGYn
                )}
              >
                {
                  "Orci dui condimentum rutrum laoreet hac purus porta sem sem a vivamus a posuere vel molestie."
                }
              </div>
              <p.Stack
                as={"div"}
                hasGap={true}
                className={classNames(projectcss.all, sty.freeBox__ci8Td)}
              >
                <Button
                  className={classNames("__wab_instance", sty.button__ts5Xu)}
                  endIcon={
                    <IconIcon
                      className={classNames(projectcss.all, sty.svg__wgKfr)}
                      role={"img"}
                    />
                  }
                  startIcon={
                    <ChecksvgIcon
                      className={classNames(projectcss.all, sty.svg__oBrgi)}
                      role={"img"}
                    />
                  }
                  submitsForm={true}
                >
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text___0Wnca
                    )}
                  >
                    {"Start now ->"}
                  </div>
                </Button>
                <Button
                  className={classNames("__wab_instance", sty.button___7N5Dm)}
                  color={"clear" as const}
                  endIcon={
                    <IconIcon
                      className={classNames(projectcss.all, sty.svg__ld9Et)}
                      role={"img"}
                    />
                  }
                  startIcon={
                    <ChecksvgIcon
                      className={classNames(projectcss.all, sty.svg__r2IO)}
                      role={"img"}
                    />
                  }
                  submitsForm={true}
                >
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__qd5Bt
                    )}
                  >
                    {"Learn more\u2026"}
                  </div>
                </Button>
              </p.Stack>
            </p.Stack>
          </p.Stack>
          <p.Stack
            as={"div"}
            hasGap={true}
            className={classNames(projectcss.all, sty.freeBox__lBjqF)}
          >
            <p.Stack
              as={"div"}
              hasGap={true}
              className={classNames(projectcss.all, sty.freeBox__dVtRd)}
            >
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__gluly
                )}
              >
                <React.Fragment>
                  <React.Fragment>{"Designs that "}</React.Fragment>
                  <span
                    className={"plasmic_default__all plasmic_default__span"}
                    style={{ textDecoration: "underline" }}
                  >
                    {"scale"}
                  </span>
                </React.Fragment>
              </div>
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__e7PB
                )}
              >
                {
                  "Orci dui condimentum rutrum laoreet hac purus porta sem sem a vivamus a posuere vel molestie."
                }
              </div>
              <p.Stack
                as={"div"}
                hasGap={true}
                className={classNames(projectcss.all, sty.freeBox__jg6Qm)}
              >
                <Button
                  className={classNames("__wab_instance", sty.button___9Mj)}
                  endIcon={
                    <IconIcon
                      className={classNames(projectcss.all, sty.svg__hgi0K)}
                      role={"img"}
                    />
                  }
                  startIcon={
                    <ChecksvgIcon
                      className={classNames(projectcss.all, sty.svg__l4UVz)}
                      role={"img"}
                    />
                  }
                  submitsForm={true}
                >
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__z4DB7
                    )}
                  >
                    {"Start now ->"}
                  </div>
                </Button>
                <Button
                  className={classNames("__wab_instance", sty.button__bfnu5)}
                  color={"clear" as const}
                  endIcon={
                    <IconIcon
                      className={classNames(projectcss.all, sty.svg__oV34C)}
                      role={"img"}
                    />
                  }
                  startIcon={
                    <ChecksvgIcon
                      className={classNames(projectcss.all, sty.svg__he62)}
                      role={"img"}
                    />
                  }
                  submitsForm={true}
                >
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__uxqkQ
                    )}
                  >
                    {"Learn more\u2026"}
                  </div>
                </Button>
              </p.Stack>
            </p.Stack>
          </p.Stack>
          <p.Stack
            as={"div"}
            hasGap={true}
            className={classNames(projectcss.all, sty.freeBox___5LokG)}
          >
            <p.Stack
              as={"div"}
              hasGap={true}
              className={classNames(projectcss.all, sty.freeBox__sRwh1)}
            >
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__fvYb0
                )}
              >
                <React.Fragment>
                  <React.Fragment>{"Designs that "}</React.Fragment>
                  <span
                    className={"plasmic_default__all plasmic_default__span"}
                    style={{ textDecoration: "underline" }}
                  >
                    {"scale"}
                  </span>
                </React.Fragment>
              </div>
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__fWvTs
                )}
              >
                {
                  "Orci dui condimentum rutrum laoreet hac purus porta sem sem a vivamus a posuere vel molestie."
                }
              </div>
              <p.Stack
                as={"div"}
                hasGap={true}
                className={classNames(projectcss.all, sty.freeBox__uzp6J)}
              >
                <Button
                  className={classNames("__wab_instance", sty.button__tJnJg)}
                  endIcon={
                    <IconIcon
                      className={classNames(projectcss.all, sty.svg__qbod1)}
                      role={"img"}
                    />
                  }
                  startIcon={
                    <ChecksvgIcon
                      className={classNames(projectcss.all, sty.svg__a5Em)}
                      role={"img"}
                    />
                  }
                  submitsForm={true}
                >
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__gYnEs
                    )}
                  >
                    {"Start now ->"}
                  </div>
                </Button>
                <Button
                  className={classNames("__wab_instance", sty.button__nDimp)}
                  color={"clear" as const}
                  endIcon={
                    <IconIcon
                      className={classNames(projectcss.all, sty.svg__om6Pc)}
                      role={"img"}
                    />
                  }
                  startIcon={
                    <ChecksvgIcon
                      className={classNames(projectcss.all, sty.svg__hlTf4)}
                      role={"img"}
                    />
                  }
                  submitsForm={true}
                >
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__wQkXv
                    )}
                  >
                    {"Learn more\u2026"}
                  </div>
                </Button>
              </p.Stack>
            </p.Stack>
          </p.Stack>
          <p.Stack
            as={"div"}
            hasGap={true}
            className={classNames(projectcss.all, sty.freeBox__mSa)}
          >
            <p.Stack
              as={"div"}
              hasGap={true}
              className={classNames(projectcss.all, sty.freeBox___2MLt)}
            >
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__wegjx
                )}
              >
                <React.Fragment>
                  <React.Fragment>{"Designs that "}</React.Fragment>
                  <span
                    className={"plasmic_default__all plasmic_default__span"}
                    style={{ textDecoration: "underline" }}
                  >
                    {"scale"}
                  </span>
                </React.Fragment>
              </div>
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__t65W3
                )}
              >
                {
                  "Orci dui condimentum rutrum laoreet hac purus porta sem sem a vivamus a posuere vel molestie."
                }
              </div>
              <p.Stack
                as={"div"}
                hasGap={true}
                className={classNames(projectcss.all, sty.freeBox__sGsT2)}
              >
                <Button
                  className={classNames("__wab_instance", sty.button___0Ex0)}
                  endIcon={
                    <IconIcon
                      className={classNames(projectcss.all, sty.svg__lamBj)}
                      role={"img"}
                    />
                  }
                  startIcon={
                    <ChecksvgIcon
                      className={classNames(projectcss.all, sty.svg__z0HXq)}
                      role={"img"}
                    />
                  }
                  submitsForm={true}
                >
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text___7N1Ub
                    )}
                  >
                    {"Start now ->"}
                  </div>
                </Button>
                <Button
                  className={classNames("__wab_instance", sty.button__rjlbt)}
                  color={"clear" as const}
                  endIcon={
                    <IconIcon
                      className={classNames(projectcss.all, sty.svg__jiNcK)}
                      role={"img"}
                    />
                  }
                  startIcon={
                    <ChecksvgIcon
                      className={classNames(projectcss.all, sty.svg__fxBwd)}
                      role={"img"}
                    />
                  }
                  submitsForm={true}
                >
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__yXabC
                    )}
                  >
                    {"Learn more\u2026"}
                  </div>
                </Button>
              </p.Stack>
            </p.Stack>
          </p.Stack>
        </div>
      </div>
    </React.Fragment>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: [
    "root",
    "headerSection",
    "topLinksSection",
    "topLinksLeft",
    "topLinksRight",
    "navbar",
    "img",
    "navbarMenuLinks"
  ],
  headerSection: [
    "headerSection",
    "topLinksSection",
    "topLinksLeft",
    "topLinksRight",
    "navbar",
    "img",
    "navbarMenuLinks"
  ],
  topLinksSection: ["topLinksSection", "topLinksLeft", "topLinksRight"],
  topLinksLeft: ["topLinksLeft"],
  topLinksRight: ["topLinksRight"],
  navbar: ["navbar", "img", "navbarMenuLinks"],
  img: ["img"],
  navbarMenuLinks: ["navbarMenuLinks"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  headerSection: "section";
  topLinksSection: "div";
  topLinksLeft: "div";
  topLinksRight: "div";
  navbar: "section";
  img: typeof p.PlasmicImg;
  navbarMenuLinks: typeof NavbarMenuLinks;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicHomepage__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicHomepage__VariantsArgs;
    args?: PlasmicHomepage__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicHomepage__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    /* Specify args directly as props*/ Omit<
      PlasmicHomepage__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: [...PlasmicDescendants[nodeName]],
          internalArgPropNames: PlasmicHomepage__ArgProps,
          internalVariantPropNames: PlasmicHomepage__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicHomepage__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicHomepage";
  } else {
    func.displayName = `PlasmicHomepage.${nodeName}`;
  }
  return func;
}

export const PlasmicHomepage = Object.assign(
  // Top-level PlasmicHomepage renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    headerSection: makeNodeComponent("headerSection"),
    topLinksSection: makeNodeComponent("topLinksSection"),
    topLinksLeft: makeNodeComponent("topLinksLeft"),
    topLinksRight: makeNodeComponent("topLinksRight"),
    navbar: makeNodeComponent("navbar"),
    img: makeNodeComponent("img"),
    navbarMenuLinks: makeNodeComponent("navbarMenuLinks"),

    // Metadata about props expected for PlasmicHomepage
    internalVariantProps: PlasmicHomepage__VariantProps,
    internalArgProps: PlasmicHomepage__ArgProps,

    // Page metadata
    pageMetadata: {
      title: "",
      description: "",
      ogImageSrc: "",
      canonical: ""
    }
  }
);

export default PlasmicHomepage;
/* prettier-ignore-end */
